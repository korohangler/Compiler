{
    "Rules": [
        {
            "Regexp" : "\/\\*[\\d\\D]*\\*\/",
            "Type"   : "Comment"
        },
        {
            "Regexp" : "\/\/.*\n",
            "Type"   : "Comment"
        },
        {
            "Regexp" : "(\".*?\")|('.*?')",
            "Type"   : "StringLiteral"
        },
        {
            "Regexp" : ":",
            "Type"   : "Colon"
        },
        {
            "Regexp" : "\\.",
            "Type"   : "Dot"
        },
        {
            "Regexp" : "\\{",
            "Type"   : "CurlyOpeningBracket"
        },
        {
            "Regexp" : "\\}",
            "Type"   : "CurlyCloseBracket"
        },
        {
            "Regexp" : "\\(",
            "Type"   : "RoundOpeningBracket"
        },
        {
            "Regexp" : "\\)",
            "Type"   : "RoundCloseBracket"
        },
        {
            "Regexp" : ",",
            "Type"   : "Comma"
        },
        {
            "Regexp" : ";",
            "Type"   : "Semicolon"
        },
        {
            "Regexp" : "\\[",
            "Type"   : "SquareOpeningBracket"
        },
        {
            "Regexp" : "\\]",
            "Type"   : "SquareCloseBracket"
        },
        {
            "Regexp" : "(\t|\r\n|\r|\n|\\s|$)",
            "Type"   : "CommonSeparator"
        },
        {
            "Regexp" : "$",
            "Type"   : "CommonSeparator"
        },
        {
            "Regexp" : "0x[\\w\\d]+",
            "Type"   : "HexLiteral",
            "NeedAdditionalCheck" : true,
            "AdditionalCheck"     : "0x[0123456789ABCDEF]+"
        },
        {
            "Regexp" : "0[0123456789]+",
            "Type"   : "OctLiteral",
            "NeedAdditionalCheck" : true,
            "AdditionalCheck"     : "0[01234567]+"
        },
        {
            "Regexp" : "[-+]?(\\.[0-9]*|[0-9]+\\.|[0-9]*|[0-9]+)[eE]?[-+]?[0-9]+[flFL]?",
            "Type"   : "DoubleLiteral"
        },
        {
            "Regexp" : "<<",
            "Type"   : "BitwiseLeftShift"
        },
        {
            "Regexp" : ">>",
            "Type"   : "BitwiseRightShift"
        },
        {
            "Regexp" : "\\|\\|",
            "Type"   : "LogicOr"
        },
        {
            "Regexp" : "===",
            "Type"   : "LogicEqualTypeCheck"
        },
        {
            "Regexp" : "==",
            "Type"   : "LogicEqual"
        },
        {
            "Regexp" : "!=",
            "Type"   : "NotEqual"
        },
        {
            "Regexp" : ">=",
            "Type"   : "MoreOrEqual"
        },
        {
            "Regexp" : "<=",
            "Type"   : "LessOrEqual"
        },
        {
            "Regexp" : ">",
            "Type"   : "More"
        },
        {
            "Regexp" : "<",
            "Type"   : "Less"
        },
        {
            "Regexp" : "~",
            "Type"   : "Tilde"
        },
        {
            "Regexp" : "\\+\\+",
            "Type"   : "Plusplus"
        },
        {
            "Regexp" : "--",
            "Type"   : "MinusMinus"
        },
        {
            "Regexp" : "!",
            "Type"   : "ExclamationMark"
        },
        {
            "Regexp" : "\\+=",
            "Type"   : "PlusEqual"
        },
        {
            "Regexp" : "-=",
            "Type"   : "MinusEqual"
        },
        {
            "Regexp" : "\\/=",
            "Type"   : "DivEqual"
        },
        {
            "Regexp" : "\\*=",
            "Type"   : "MulEqual"
        },
        {
            "Regexp" : "%=",
            "Type"   : "ModEqual"
        },
        {
            "Regexp" : "=",
            "Type"   : "Assignment"
        },
        {
            "Regexp" : "[\\+\\*\\-\/%&&\\\\]",
            "Type"   : "BinaryOperator"
        },
        {
            "Regexp" : "\\?",
            "Type"   : "QuestionMark"
        },
        {
            "Regexp" : "new(?=\\W)",
            "Type"   : "New"
        },
        {
            "Regexp" : "static(?=\\W)",
            "Type"   : "Static"
        },
        {
            "Regexp" : "class(?=\\W)",
            "Type"   : "Class"
        },
        {
            "Regexp" : "export(?=\\W)",
            "Type"   : "Export"
        },
        {
            "Regexp" : "constructor(?=\\W)",
            "Type"   : "Constructor"
        },
        {
            "Regexp" : "const(?=\\W)",
            "Type"   : "Const"
        },
        {
            "Regexp" : "let(?=\\W)",
            "Type"   : "Let"
        },
        {
            "Regexp" : "var(?=\\W)",
            "Type"   : "Let"
        },
        {
            "Regexp" : "while(?=\\W)",
            "Type"   : "While"
        },
        {
            "Regexp" : "for(?=\\W)",
            "Type"   : "For"
        },
        {
            "Regexp" : "do(?=\\W)",
            "Type"   : "Do"
        },
        {
            "Regexp" : "break(?=\\W)",
            "Type"   : "Break"
        },
        {
            "Regexp" : "switch(?=\\W)",
            "Type"   : "Switch"
        },
        {
            "Regexp" : "case(?=\\W)",
            "Type"   : "Case"
        },
        {
            "Regexp" : "default(?=\\W)",
            "Type"   : "Default"
        },
        {
            "Regexp" : "if(?=\\W)",
            "Type"   : "If"
        },
        {
            "Regexp" : "else(?=\\W)",
            "Type"   : "Else"
        },
        {
            "Regexp" : "function(?=\\W)",
            "Type"   : "Function"
        },
        {
            "Regexp" : "return(?=\\W)",
            "Type"   : "Return"
        },
        {
            "Regexp" : "NaN(?=\\W)",
            "Type"   : "NaN"
        },
        {
            "Regexp" : "Infinity(?=\\W)",
            "Type"   : "Infinity"
        },
        {
            "Regexp" : "undefined(?=\\W)",
            "Type"   : "Undifined"
        },
        {
            "Regexp" : "_?[a-zA-Z]+[\\w\\d]*",
            "Type"   : "Identificator"
        }
    ]
}
