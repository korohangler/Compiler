{
    "Rules": [
        {
            "Regexp" : "\/\\*(.|\n)*?\\*\/",
            "Type"   : "Comment",
            "NeedExport" : false
        },
        {
            "Regexp" : "\/\/.*\n",
            "Type"   : "Comment",
            "NeedExport" : false
        },
        {
            "Regexp" : "\".*\"",
            "Type"   : "StringLiteral"
        },
        {
            "Regexp" : "([;,]|\\(|\\)|\\{|\\}|\t|\\[|\\]|\\.)",
            "Type"   : "Separator"
        },
        {
            "Regexp" : "(\r\n|\r|\n|\\s|$)",
            "Type"   : "Separator",
            "DeleteDuplicates" : true
        },
        {
            "Regexp" : "$",
            "Type"   : "Separator",
            "DeleteDuplicates" : true
        },
        {
            "Regexp" : "0x[ABCDEF0123456789]+",
            "Type"   : "HexLiteral"
        },
        {
            "Regexp" : "0[01234567]+",
            "Type"   : "OctLiteral"
        },
        {
            "Regexp" : "[-+]?(\\.[0-9]*|[0-9]+\\.|[0-9]*|[0-9]+)[eE]?[-+]?[0-9]+[flFL]?",
            "Type"   : "DoubleLiteral"
        },
        {
            "Regexp" : "==|!=|>=|<=|>|<",
            "Type"   : "LogicOperator"
        },
        {
            "Regexp" : "\\+\\+|--|!|~",
            "Type"   : "UnaryOperator"
        },
        {
            "Regexp" : "\\+=",
            "Type"   : "PlusEqual"
        },
        {
            "Regexp" : "-=",
            "Type"   : "MinusEqual"
        },
        {
            "Regexp" : "\\/=",
            "Type"   : "DivEqual"
        },
        {
            "Regexp" : "\\*=",
            "Type"   : "MulEqual"
        },
        {
            "Regexp" : "%=",
            "Type"   : "ModEqual"
        },
        {
            "Regexp" : "=",
            "Type"   : "Assignment"
        },
        {
            "Regexp" : "[\\+\\*\\-\/%&&\\\\]",
            "Type"   : "BinaryOperator"
        },
        {
            "Regexp" : "(let|var|while|for|do|break|switch|case|default|if|else|function|return|NaN|Infinity|undefined)(?=\\W)",
            "Type"   : "KeyWord"
        },
        {
            "Regexp" : "_?[a-zA-Z]+[\\w\\d]*",
            "Type"   : "Identificator"
        }
    ],
    "Optimize" : [
        {
            "Type" : "Separator",
            "From" : "; ",
            "To"   : ";"
        },
        {
            "Type" : "Separator",
            "From" : " ;",
            "To"   : ";"
        },
        {
            "Type" : "Separator",
            "From" : "\n;",
            "To"   : ";"
        },
        {
            "Type" : "Separator",
            "From" : ";\n",
            "To"   : ";"
        },
        {
            "Type" : "Separator",
            "From" : " \n",
            "To"   : "\n"
        },
        {
            "Type" : "Separator",
            "From" : "\n ",
            "To"   : "\n"
        },
        {
            "Type" : "Separator",
            "From" : ", ",
            "To"   : ","
        },
        {
            "Type" : "Separator",
            "From" : " ,",
            "To"   : ","
        },
        {
            "Type" : "Separator",
            "From" : " [",
            "To"   : "["
        },
        {
            "Type" : "Separator",
            "From" : "[ ",
            "To"   : "["
        },
        {
            "Type" : "Separator",
            "From" : " ]",
            "To"   : "]"
        },
        {
            "Type" : "Separator",
            "From" : "] ",
            "To"   : "]"
        }
    ]
}
