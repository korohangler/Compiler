{
    "Rules": [
        {
            "Regexp" : "\/\\*[\\d\\D]*\\*\/",
            "Type"   : "Comment"
        },
        {
            "Regexp" : "\/\/.*\n",
            "Type"   : "Comment"
        },
        {
            "Regexp" : "(\".*?\")|('.*?')",
            "Type"   : "StringLiteral"
        },
        {
            "Regexp" : ":",
            "Type"   : "Colon"
        },
        {
            "Regexp" : "\\.",
            "Type"   : "Dot"
        },
        {
            "Regexp" : "(\\{|\\}|\\(|\\)|\\[|\\])",
            "Type"   : "Bracket"
        },
        {
            "Regexp" : ",",
            "Type"   : "Comma"
        },
        {
            "Regexp" : ";",
            "Type"   : "Semicolon"
        },
        {
            "Regexp" : "(\t|\r\n|\r|\n|\\s|$)",
            "Type"   : "CommonSeparator"
        },
        {
            "Regexp" : "$",
            "Type"   : "CommonSeparator"
        },
        {
            "Regexp" : "0x[\\w\\d]+",
            "Type"   : "HexLiteral",
            "NeedAdditionalCheck" : true,
            "AdditionalCheck"     : "0x[0123456789ABCDEF]+"
        },
        {
            "Regexp" : "0[0123456789]+",
            "Type"   : "OctLiteral",
            "NeedAdditionalCheck" : true,
            "AdditionalCheck"     : "0[01234567]+"
        },
        {
            "Regexp" : "[-+]?(\\.[0-9]*|[0-9]+\\.|[0-9]*|[0-9]+)[eE]?[-+]?[0-9]+[flFL]?",
            "Type"   : "DoubleLiteral"
        },
        {
            "Regexp" : "(<<|>>|(\\|\\|)|===)",
            "Type"   : "BinaryOperator"
        },
        {
            "Regexp" : "==",
            "Type"   : "BinaryOperator"
        },
        {
            "Regexp" : "(!=|>=|<=)",
            "Type"   : "BinaryOperator"
        },
        {
            "Regexp" : "(~|(\\+\\+)|--|!)",
            "Type"   : "UnaryOperator"
        },
        {
            "Regexp" : "(>|<)|([\\+\\*\\-\/%&&\\\\])",
            "Type"   : "BinaryOperator"
        },
        {
            "Regexp" : "=",
            "Type"   : "Assignment"
        },
        {
            "Regexp" : "\\?",
            "Type"   : "QuestionMark"
        },
        {
            "Regexp" : "(new|static|class|export|constructor|switch|case|default)(?=\\W)",
            "Type"   : "NotImplementedKeyword"
        },
        {
            "Regexp" : "(const|let|var|while|for|do|break|if|else|function|return)(?=\\W)",
            "Type"   : "Keyword"
        },
        {
            "Regexp" : "(NaN|Infinity|undefined)(?=\\W)",
            "Type"   : "Keyword"
        },
        {
            "Regexp" : "_?[a-zA-Z]+[\\w\\d]*",
            "Type"   : "Identificator"
        }
    ]
}
